Git Notes 20181022 2018.295
Copyright (c) 2014, 2015, 2016, 2017, 2018 William N. Braswell, Jr.

# [[[ INDIVIDUAL COMMANDS ]]]
# [[[ INDIVIDUAL COMMANDS ]]]
# [[[ INDIVIDUAL COMMANDS ]]]

# START HERE, NEED ADD: git clone, git add, git commit, git push
# START HERE, NEED ADD: git clone, git add, git commit, git push
# START HERE, NEED ADD: git clone, git add, git commit, git push

# [[[ UPDATES LOCAL .git/ DATABASE ONLY, DOES NOT CHANGE LOCAL BRANCH ]]]
$ git remote update
# MOSTLY EQUALS, BUT BETTER THAN
$ git fetch


# [[[ NO LOCAL CHANGES MADE, REMOTE CHANGES MADE BY SOMEONE ELSE, GET REMOTE CHANGES ]]]
$ git pull
# EQUALS
$ git fetch; git merge


# [[[ LOCAL CHANGES MADE, REMOTE CHANGES COMMITTED TO GITHUB BY SOMEONE ELSE, 
#     GET REMOTE CHANGES W/OUT LOSING LOCAL CHANGES ]]]
$ git remote update; git rebase -i origin/master
# MOSTLY EQUALS, BUT BETTER THAN
$ git pull --rebase
# MOSTLY EQUALS, BUT BETTER THAN
$ git fetch; git rebase


# [[[ LOCAL CHANGES MADE, HIDE LOCAL CHANGES BY STORING ON STASH STACK, REVERT TO PREVIOUS COMMIT ]]]
# like a commit to a new local-only branch w/ a serialized name on a special stack
$ git stash


# [[[ COMMON COMMAND SEQUENCES ]]]
# [[[ COMMON COMMAND SEQUENCES ]]]
# [[[ COMMON COMMAND SEQUENCES ]]]

# [[[ SET UP SSH KEYS ]]]
# https://help.github.com/articles/generating-ssh-keys
$ cd ~/.ssh;  ls -la  # skip next step if id_rsa.pub or id_dsa.pub files exist
$ ssh-keygen -t rsa -C "GITHUB_ACCOUNT_EMAIL_ADDRESS";  eval `ssh-agent -s`;  ssh-add ~/.ssh/id_rsa;  ssh-agent -k
    # DO create secure key passphrase
$ sudo apt-get install keychain
$ echo '/usr/bin/keychain $HOME/.ssh/id_rsa;  source $HOME/.keychain/$HOSTNAME-sh' >> ~/.bashrc;  source ~/.bashrc
$ reset;  cat ~/.ssh/id_rsa.pub  # copy to clipboard
# browse to https://github.com/settings/ssh
# click "Add SSH Key", paste, title LINUXUSERNAME@LINUXMACHINENAME, save
$ ssh -T git@github.com  # confirm greeting, requires passphrase
$ git config --global user.email "GITHUB_ACCOUNT_EMAIL_ADDRESS"
$ git config --global user.name "FIRSTNAME LASTNAME"
$ git config --global core.editor "vim"
# manually create github repository via webui, if not already done


# [[[ GET STARTED, REMOTE -> LOCAL -> REMOTE, WITHOUT AUTOMATIC REPOSITORY INITIALIZATION BY GITHUB ]]]
$ cd GIT_REPOS_DIR
$ git init
$ git add .
$ git commit -m "INITIAL COMMIT MESSAGE"
$ git remote add origin URL_FROM_GITHUB
$ git pull origin master
$ git push origin master


# [[[ GET STARTED, REMOTE -> LOCAL -> REMOTE, WITH AUTOMATIC REPOSITORY INITIALIZATION BY GITHUB ]]]
$ git clone URL_FROM_GITHUB ./GITHUB_REPO_NAME-latest
$ cd GITHUB_REPO_NAME-latest
$ git checkout gh-pages  # ONLY IF USING GITHUB PAGES
$ git reset --hard origin/gh-pages  # ONLY IF USING GITHUB PAGES


# [[[ UPDATE CODE CHANGES, LOCAL -> REMOTE ]]]
$ git add -A
$ git commit -a
    # (Initial Commit;) Major Comment, Minor Comments
$ git push origin master


# [[[ UPDATE GITHUB PAGES, LOCAL -> REMOTE ]]]
$ git checkout -b gh-pages  # CREATES LOCAL BRANCH
$ git checkout gh-pages
	# NOW MANUALLY EDIT WEB PAGE FILES 
$ git add -A
$ git commit -a
$ git push origin gh-pages
$ git checkout master


# [[[ CREATE NEW BRANCH, LOCAL -> REMOTE -> LOCAL -> REMOTE ]]]
$ cd GIT_REPOS_DIR
$ git checkout -b NEW_BRANCH
$ git push origin NEW_BRANCH
	# NOW MANUALLY EDIT NEW BRANCH FILES, OTHER COLLABORATORS
$ git pull origin NEW_BRANCH
    # NOW MANUALLY EDIT NEW BRANCH FILES, ADD AUTO-GENERATED FILES TO .gitignore AS NEEDED
$ git status
$ git diff
    # NOW MANUALLY CONFIRM CODE CHANGES ARE ALL PUSH-WORTHY
$ git add -A
$ git commit -a
$ git push origin NEW_BRANCH


# [[[ MERGE NEW BRANCH BACK INTO MASTER BRANCH ]]]
$ cd GIT_REPOS_DIR
$ git checkout NEW_BRANCH
$ git status
    On branch NEW_BRANCH
    nothing to commit (working directory clean)
$ git rebase master  # NOTE: automatically update new branch to be based on latest master branch
    Current branch NEW_BRANCH is up to date.
$ git checkout master
    Switched to branch 'master'
$ git pull . NEW_BRANCH
    From .  * branch ... NEW_BRANCH -> FETCH_HEAD
    Updating ...  Fast-forward ETC ETC
$ git log
    # NOW MANUALLY CONFIRM LOG CHANGES ARE PUSH-WORTHY
$ git push origin master
    Total 0 (delta 0), reused 0 (delta 0)
    To git@github.com:USER_NAME/PROJECT_NAME.git
       ...  master -> master
$ git branch -D NEW_BRANCH  # WARNING: hard delete!
    Deleted branch NEW_BRANCH (was ...).
$ git push origin :NEW_BRANCH
    To git@github.com:USER_NAME/PROJECT_NAME.git
     - [deleted]         NEW_BRANCH


# [[[ FIX BROKEN LOCAL GH-PAGES BRANCH, THROW AWAY LOCAL CODE & REPLACE WITH ALL REMOTE CODE ]]]
$ git fetch
$ git checkout gh-pages
$ git reset --hard origin/gh-pages


# [[[ UNDO GIT ADD BEFORE GIT COMMIT ]]]
# [ UNDO SINGLE FILE ADD ]
$ git reset HEAD FILE_YOU_DIDNT_MEAN_TO_ADD  # "HEAD" is a real git keyword, do not change it
# OR
# [ UNDO ALL ADDS ]
$ git reset HEAD


# [[[ REVERT TO 3 COMMITS AGO, WITHOUT LOSING CURRENT WORK ]]]
$ git reset HEAD~3
$ git diff
$ vi TO_EDIT_DIFFS
$ git add -A
$ git commit -a
$ git push origin INSERT_BRANCH


# [[[ LOCAL CHANGES MADE, REMOTE CHANGES COMMITTED TO GITHUB BY SOMEONE ELSE, 
#     GET REMOTE CHANGES W/OUT LOSING LOCAL CHANGES, ADD LOCAL CHANGES AFTER REMOTE CHANGES ]]]
$ git commit -a
$ git remote update
$ git rebase -i origin/master
$ git push origin master


# [[[ FIX LATEST COMMIT MESSAGE AFTER PUSH TO REMOTE GITHUB ]]]
$ git commit --amend
$ git push --force origin master


# [[[ UNDO GIT ADD & UNDO GIT COMMIT ]]]
$ git reset HEAD~


# [[[ COMBINE MULTIPLE COMMITS INTO ONE COMMIT, AUTOMATICALLY UPDATES ASSOCIATED PULL REQUEST ]]]
# first, make 1 or more commits to a specific repo branch, and push to git server
$ git add -A; git commit -a
$ git push origin master
$ ...
# second, make final commit
$ git add -A; git commit -a
# third, rebase to total number of commits (2 minimum), choose 'pick' for latest commit and 'squash' for all others,
# leave multiple commit messages as-is if already correct & descriptive
$ git rebase -i HEAD~2
# fourth, force push back to git server, will overwrite/update existing commit with all new commits merged together,
# also check any associated pull request(s) to see updated changes w/out closing PR or opening new PR
$ git push -f
